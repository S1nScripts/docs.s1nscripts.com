"use strict";(self.webpackChunkdocs_s_1_nscripts_com=self.webpackChunkdocs_s_1_nscripts_com||[]).push([[519],{7715:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>y,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=a(5893),o=a(1151);const r={sidebar_position:1,title:"Installation",sidebar_label:"Installation"},l="Government System",s={id:"government/install",title:"Installation",description:"S1nScripts Logo",source:"@site/docs/government/install.md",sourceDirName:"government",slug:"/government/install",permalink:"/docs/government/install",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/government/install.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Installation",sidebar_label:"Installation"},sidebar:"docs",previous:{title:"Common issues",permalink:"/docs/banking/common-issues"},next:{title:"Config",permalink:"/docs/government/config"}},i={},c=[{value:"Installation",id:"installation",level:2},{value:"Follow these steps to install the government system",id:"follow-these-steps-to-install-the-government-system",level:3},{value:"Auto update jobs",id:"auto-update-jobs",level:4},{value:"Adapt to ESX",id:"adapt-to-esx",level:5},{value:"Adapt to QBCore",id:"adapt-to-qbcore",level:5},{value:"Paycheck taxes",id:"paycheck-taxes",level:4},{value:"Adapt to ESX",id:"adapt-to-esx-1",level:5},{value:"Adapt to QBCore",id:"adapt-to-qbcore-1",level:5}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://dunb17ur4ymx4.cloudfront.net/packages/images/c51c22495d1d374824fc5ee961248a624a65c47d.jpg",alt:"S1nScripts Logo"})}),"\n",(0,t.jsx)(n.h1,{id:"government-system",children:"Government System"}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsx)(n.p,{children:"We highly recommend you to read carefully each step written below."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Don't skip any step, it could lead to a non-functioning script."})})]}),"\n",(0,t.jsx)(n.h3,{id:"follow-these-steps-to-install-the-government-system",children:"Follow these steps to install the government system"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Download the script from KeyMaster."}),"\n",(0,t.jsx)(n.li,{children:'Download the "Library" script from KeyMaster.'}),"\n",(0,t.jsxs)(n.li,{children:["Drag the ",(0,t.jsx)(n.code,{children:"s1n_lib"})," folder into your ",(0,t.jsx)(n.code,{children:"resources"})," directory."]}),"\n",(0,t.jsxs)(n.li,{children:["Rename the ",(0,t.jsx)(n.code,{children:"s1n_lib-...."})," folder to ",(0,t.jsx)(n.code,{children:"s1n_lib"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Drag the ",(0,t.jsx)(n.code,{children:"s1n_government"})," folder into your ",(0,t.jsx)(n.code,{children:"resources"})," directory."]}),"\n",(0,t.jsxs)(n.li,{children:["Rename the ",(0,t.jsx)(n.code,{children:"s1n_government-...."})," folder to ",(0,t.jsx)(n.code,{children:"s1n_government"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Start the banking system by adding ",(0,t.jsx)(n.code,{children:"start s1n_government"})," to your ",(0,t.jsx)(n.code,{children:"server.cfg"})," file."]}),"\n",(0,t.jsxs)(n.li,{children:["Please insert the SQL queries in your database (you can find them in the ",(0,t.jsx)(n.code,{children:"s1n_government/database.sql"})," file)."]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the script by modifying the values in the ",(0,t.jsx)(n.code,{children:"config.lua"})," file located in the ",(0,t.jsx)(n.code,{children:"s1n_government/shared/"})," script folder."]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the library by modifying the values in all the files contained in the ",(0,t.jsx)(n.code,{children:"configuration/"})," folder located in the ",(0,t.jsx)(n.code,{children:"s1n_lib/"})," script folder."]}),"\n",(0,t.jsx)(n.li,{children:"Follow the instructions below to adapt the script to your framework for some features."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"auto-update-jobs",children:"Auto update jobs"}),"\n",(0,t.jsx)(n.h5,{id:"adapt-to-esx",children:"Adapt to ESX"}),"\n",(0,t.jsx)(n.p,{children:"No need to adapt the script."}),"\n",(0,t.jsx)(n.h5,{id:"adapt-to-qbcore",children:"Adapt to QBCore"}),"\n",(0,t.jsxs)(n.p,{children:["Go to ",(0,t.jsx)(n.code,{children:"qb-core/server/events.lua"}),".\nThen, at the bottom of the file, add the following code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"RegisterNetEvent('QBCore:UpdateJobs', function(jobs) \n    QBCore.Shared.Jobs = jobs \nend)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"paycheck-taxes",children:"Paycheck taxes"}),"\n",(0,t.jsx)(n.h5,{id:"adapt-to-esx-1",children:"Adapt to ESX"}),"\n",(0,t.jsxs)(n.p,{children:["Go to ",(0,t.jsx)(n.code,{children:"es_extended/server/paycheck.lua"})," or the equivalent. Then look for ",(0,t.jsx)(n.code,{children:"StartPayCheck"})," function and replace or adapt it with the following code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'function StartPayCheck() \n    CreateThread(function() \n        while true do \n            Wait(Config.PaycheckInterval) \n            \n            for player, xPlayer in pairs(ESX.Players) do \n                local jobLabel = xPlayer.job.label \n                local job = xPlayer.job.grade_name \n                local salary = xPlayer.job.grade_salary\n    \n                if salary > 0 then\n                    if job == "unemployed" then -- unemployed\n                        xPlayer.addAccountMoney("bank", salary, "Welfare Check")\n                        exports["s1n_government"]:removePaycheckTaxes(xPlayer.source, salary)\n                       \n                        TriggerClientEvent("esx:showAdvancedNotification", player, TranslateCap("bank"), TranslateCap("received_paycheck"), TranslateCap("received_help", salary), "CHAR_BANK_MAZE", 9)\n                       \n                        if Config.LogPaycheck then\n                            ESX.DiscordLogFields("Paycheck", "Paycheck - Unemployment Benefits", "green", {\n                                { name = "Player", value = xPlayer.name, inline = true },\n                                { name = "ID", value = xPlayer.source, inline = true },\n                                { name = "Amount", value = salary, inline = true },\n                            })\n                        end\n                    elseif Config.EnableSocietyPayouts then -- possibly a society\n                        TriggerEvent("esx_society:getSociety", xPlayer.job.name, function(society)\n                            if society ~= nil then -- verified society\n                                TriggerEvent("esx_addonaccount:getSharedAccount", society.account, function(account)\n                                    if account.money >= salary then -- does the society money to pay its employees?\n                                        xPlayer.addAccountMoney("bank", salary, "Paycheck")\n                                       \n                                        exports["s1n_government"]:removePaycheckTaxes(xPlayer.source, salary)\n                                        account.removeMoney(salary)\n                                       \n                                        if Config.LogPaycheck then\n                                            ESX.DiscordLogFields("Paycheck", "Paycheck - " .. jobLabel, "green", {\n                                                { name = "Player", value = xPlayer.name, inline = true },\n                                                { name = "ID", value = xPlayer.source, inline = true },\n                                                { name = "Amount", value = salary, inline = true },\n                                            })\n                                        end\n    \n                                        TriggerClientEvent("esx:showAdvancedNotification", player, TranslateCap("bank"), TranslateCap("received_paycheck"), TranslateCap("received_salary", salary), "CHAR_BANK_MAZE", 9)\n                                    else\n                                        TriggerClientEvent("esx:showAdvancedNotification", player, TranslateCap("bank"), "", TranslateCap("company_nomoney"), "CHAR_BANK_MAZE", 1)\n                                    end\n                                end)\n                            else -- not a society\n                                xPlayer.addAccountMoney("bank", salary, "Paycheck")\n                                exports["s1n_government"]:removePaycheckTaxes(xPlayer.source, salary)\n                               \n                                if Config.LogPaycheck then\n                                    ESX.DiscordLogFields("Paycheck", "Paycheck - " .. jobLabel, "green", {\n                                        { name = "Player", value = xPlayer.name, inline = true },\n                                        { name = "ID", value = xPlayer.source, inline = true },\n                                        { name = "Amount", value = salary, inline = true },\n                                    })\n                                end\n                             \n                                TriggerClientEvent("esx:showAdvancedNotification", player, TranslateCap("bank"), TranslateCap("received_paycheck"), TranslateCap("received_salary", salary), "CHAR_BANK_MAZE", 9)\n                            end\n                        end)\n                    else -- generic job\n                        xPlayer.addAccountMoney("bank", salary, "Paycheck")\n                        exports["s1n_government"]:removePaycheckTaxes(xPlayer.source, salary)\n                       \n                        if Config.LogPaycheck then\n                            ESX.DiscordLogFields("Paycheck", "Paycheck - Generic", "green", {\n                                { name = "Player", value = xPlayer.name, inline = true },\n                                { name = "ID", value = xPlayer.source, inline = true },\n                                { name = "Amount", value = salary, inline = true },\n                            })\n                        end\n                      \n                        TriggerClientEvent("esx:showAdvancedNotification", player, TranslateCap("bank"), TranslateCap("received_paycheck"), TranslateCap("received_salary", salary), "CHAR_BANK_MAZE", 9)\n                    end\n                end\n            end\n        end\n    end)\nend\n'})}),"\n",(0,t.jsx)(n.h5,{id:"adapt-to-qbcore-1",children:"Adapt to QBCore"}),"\n",(0,t.jsxs)(n.p,{children:["Go to ",(0,t.jsx)(n.code,{children:"qb-core/server/functions.lua"})," or the equivalent. Then look for ",(0,t.jsx)(n.code,{children:"PaycheckInterval"})," function and replace or adapt it with the following code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function PaycheckInterval()\n    if next(QBCore.Players) then\n        for _, Player in pairs(QBCore.Players) do\n            if Player then\n                local payment = QBShared.Jobs[Player.PlayerData.job.name]['grades'][tostring(Player.PlayerData.job.grade.level)].payment\n\n                if not payment then\n                    payment = Player.PlayerData.job.payment\n\n                end\n\n                if Player.PlayerData.job and payment > 0 and (QBShared.Jobs[Player.PlayerData.job.name].offDutyPay or Player.PlayerData.job.onduty) then\n                    if QBCore.Config.Money.PayCheckSociety then\n                        local account = exports['qb-banking']:GetAccountBalance(Player.PlayerData.job.name)\n\n                        if account ~= 0 then          -- Checks if player is employed by a society\n                            if account < payment then -- Checks if company has enough money to pay society\n                                TriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('error.company_too_poor'), 'error')\n                            else\n                                Player.Functions.AddMoney('bank', payment, 'paycheck')\n                                exports['qb-banking']:RemoveMoney(Player.PlayerData.job.name, payment, 'Employee Paycheck')\n                                TriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', { value = payment }))\n                                exports[\"s1n_government\"]:removePaycheckTaxes(Player.PlayerData.source, payment)\n                            end\n                        else\n                            Player.Functions.AddMoney('bank', payment, 'paycheck')\n                            TriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', { value = payment }))\n                            exports[\"s1n_government\"]:removePaycheckTaxes(Player.PlayerData.source, payment)\n                        end\n                    else\n                        Player.Functions.AddMoney('bank', payment, 'paycheck')\n                        TriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', { value = payment }))\n                        exports[\"s1n_government\"]:removePaycheckTaxes(Player.PlayerData.source, payment)\n                    end\n                end\n            end\n        end\n    end\nend\n"})})]})}function y(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>l});var t=a(7294);const o={},r=t.createContext(o);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
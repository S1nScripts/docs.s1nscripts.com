"use strict";(self.webpackChunkdocs_s_1_nscripts_com=self.webpackChunkdocs_s_1_nscripts_com||[]).push([[6203],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=c(n),m=r,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||a;return n?o.createElement(d,i(i({ref:t},u),{},{components:n})):o.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1,title:"Config",sidebar_label:"Config"},i="Marketplace",s={unversionedId:"marketplace/config",id:"marketplace/config",title:"Config",description:"Config file",source:"@site/docs/marketplace/config.md",sourceDirName:"marketplace",slug:"/marketplace/config",permalink:"/docs/marketplace/config",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/marketplace/config.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Config",sidebar_label:"Config"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/marketplace/configuration"},next:{title:"Installation",permalink:"/docs/atmrobbery/install"}},l={},c=[{value:"Config file",id:"config-file",level:2}],u={toc:c},f="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"marketplace"},"Marketplace"),(0,r.kt)("h2",{id:"config-file"},"Config file"),(0,r.kt)("p",null,"For both ESX and QBCore:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Config = {}\n\n-- Set this to true if you want to enable debug mode (for developers and support)\nConfig.debugMode = false\n\n-- Framework settings\nConfig.Framework = {\n    -- If you use ESX, you can set this to 'ESX' and it will automatically detect it otherwise set it to 'QBCore'\n    FrameworkName = 'ESX',\n    -- The name of the QBCore resource, this is only used if you use QBCore\n    QBCoreFileName = 'qb-core',\n    -- Set to true if you use the old ESX (not ESX Legacy)\n    OldESX = false,\n    -- If you use the old ESX, define the event name here to get the ESX object (by default it's 'esx:getSharedObject')\n    ESXEvent = 'esx:getSharedObject',\n    -- The name of the ESX resource, this is only used if you use ESX\n    ESXFileName = 'es_extended',\n    -- The name of the SQL wrapper you use (You can set : mysql-async, oxmysql, ghmattimysql). You need to have the resource installed and running before this script.\n    SQLWrapper = 'oxmysql'\n}\n\n-- If you use the old ESX loadout system, set this to true to support weapons\nConfig.UseEsxLoadout = false\n\n-- If you use ox-inventory, set this to true to add support for it\nConfig.UseOxInventory = false\n\n-- If you use qb-target, set this to true to add support for it\nConfig.UseQbTarget = false\n\n-- If you use ox-target, set this to true to add support for it\nConfig.UseOxTarget = false\n\n-- If you want discord logging in a channel, fill in the webhook URL here\nConfig.DiscordWebhook = ''\n\n-- Default values to advertise a product (minimum and maximum hours and the price per minute)\nConfig.Advertisement = { Min = 1, Max = 24, Price = 1 } -- Price = price per minute\n\n-- Default values to auction a product (minimum and maximum hours)\nConfig.Auction = { Min = 1, Max = 24 }\n\n-- List of blacklisted items for the marketplaces\nConfig.BlackListItems = {\n    -- The water_bottle is just an example, you can remove it if you want\n    ['water_bottle'] = true,\n}\n\n-- List of blacklisted items for the black markets\nConfig.BlackMarketBlacklistItems = {\n    -- The water_bottle is just an example, you can remove it if you want\n    ['water_bottle'] = true,\n}\n\n-- List of blacklisted vehicles for both marketplaces and black markets\nConfig.BlacklistVehicles = { }\n\n-- Set to true if you want to use dirty money for the black market\nConfig.BlackMarketUseDirtyMoney = false\n\n-- ONLY FOR QBCORE: Define the name of the dirty money item\nConfig.BlackMarketDirtyMoneyItem = 'markedbills'\n\n-- List of the marketplaces\nConfig.Marketplaces = {\n    {\n        -- Name of the marketplace\n        Name = 'testmarket',\n        -- Define to 'normal' or 'blackmarket'\n        Type = 'blackmarket',\n        -- You can whitelist the market for specific jobs\n        -- Set it to a table to add jobs to the whitelist, set it to false to disable it\n        -- Here is an example of a whitelist with 2 jobs: JobCheck = { ['police'] = true, ['ambulance'] = true }\n        -- Here is an example of a whitelist with 1 job: JobCheck = 'police'\n        JobCheck = false,\n        -- You can whitelist the possibility to sell products for specific jobs\n        -- Set it to a table to add jobs to the whitelist, set it to false to disable it\n        -- Here is an example of a whitelist with 2 jobs: SellerCheck = { ['police'] = true, ['ambulance'] = true }\n        SellerCheck = false,\n        -- The location of the marketplace (X, Y, Z)\n        Location = vector3(28.96, -1018.68, 29.6),\n        -- Blip settings\n        Blip = {\n            Sprite = 52,\n            Color = 2,\n            Scale = 1.0,\n            Label = 'The Black Market'\n        },\n        -- Marker settings\n        Marker = {\n            Type = 2,\n            Rotation = { 0.0, 180.0, 0.0 },\n            Scale = 0.4,\n            Color = { R = 222, G = 186, B = 77, A = 255 },\n            BobUpAndDown = true,\n            FaceCamera = true,\n            MarkerDistance = 5.0,\n            TextDistance = 2.0\n        },\n        -- If you want to disable the possibility to sell vehicles, set this to true otherwise set it to false\n        DisableVehicles = false,\n        -- If you want to disable the possibility to see the seller name, set this to false otherwise set it to true\n        ShowSellerName = true,\n    }\n}\n")))}p.isMDXComponent=!0}}]);